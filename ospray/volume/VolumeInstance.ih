// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Volume.ih"
#include "math/AffineSpace.ih"
#include "transferFunction/TransferFunction.ih"

struct VolumeInstance
{
  Volume *volume;  //!< instanced Volume

  //! Allow the renderer to perform gradient shading.
  bool gradientShadingEnabled;

  //! Integrates over transfer function values, good for high frequency tf
  bool preIntegration;

  //! Adaptively alter the sampling rate according to the sampled values
  bool adaptiveSampling;

  //! scalar to multiply step size for adaptive calculation
  float adaptiveScalar;

  //! maximum adaptive sampling rate
  float adaptiveMaxSamplingRate;

  //! what value to backstep for adaptie sampling, will step back and sample
  //! finely
  float adaptiveBacktrack;

  //! Recommended sampling step size for ray casting based renderers, set by the
  //! underlying volume implementation.
  float samplingStep;

  //! Recommended sampling rate for the renderer.
  float samplingRate;

  //! Color and opacity transfer function.
  TransferFunction *transferFunction;

  //! Clipping box for the volume (applies to volume rendering only). An empty
  //! clipping box is ignored.
  box3f volumeClippingBox;

  box3f boundingBox;

  //! Affine transformation
  AffineSpace3f xfm;      //!< instantiation matrix
  AffineSpace3f rcp_xfm;  //!< rcp(instantiation matrix)
};

// Helper functions ///////////////////////////////////////////////////////////

inline vec3f VolumeInstance_getColor(const VolumeInstance *uniform volume,
                                     const float sample)
{
  return volume->transferFunction->getColorForValue(volume->transferFunction,
                                                    sample);
}

inline float VolumeInstance_getOpacity(const VolumeInstance *uniform volume,
                                       const float sample)
{
  return volume->transferFunction->getOpacityForValue(volume->transferFunction,
                                                      sample);
}
