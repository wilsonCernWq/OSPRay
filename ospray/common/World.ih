// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray stuff
#include "../common/Ray.ih"
#include "../geometry/GeometryInstance.ih"
#include "../volume/VolumeInstance.ih"

extern "C" RTCDevice uniform ispc_embreeDevice();

struct World
{
  void *cppEquivalent;

  uniform RTCScene embreeSceneHandleGeometries;

  uniform GeometryInstance *uniform *uniform geometryInstances;
  uniform int32 geometryInstanceCount;

  uniform VolumeInstance *uniform *uniform volumeInstances;
  uniform int32 volumeInstanceCount;

  uniform RTCScene embreeSceneHandleVolumes;

  uniform box3f bounds;
};

inline void traceRay(const World *uniform model,
                     varying Ray &ray,
                     void *uniform userPtr)
{
  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = userPtr;
  rtcIntersectV(model->embreeSceneHandleGeometries,
                &context.ectx,
                (varying RTCRayHit* uniform)&ray);
}

inline void traceRay(const World *uniform model,
                     varying Ray &ray)
{
  traceRay(model, ray, NULL);
}

inline bool isOccluded(const World *uniform model,
                       varying Ray &ray,
                       void *uniform userPtr)
{
  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = userPtr;
  rtcOccludedV(model->embreeSceneHandleGeometries,
               &context.ectx,
               (varying RTCRay* uniform)&ray);
  return ray.t < ray.t0;
}

inline bool isOccluded(const World *uniform model, varying Ray &ray)
{
  return isOccluded(model, ray, NULL);
}

inline void traceVolumeRay(World *uniform model,
                           varying Ray &ray,
                           VolumeInterval &interval)
{
  initVolumeInterval(interval);

  uniform EmbreeIntersectionContext context;
  rtcInitIntersectContext(&context.ectx);
  context.userPtr = &interval;
  rtcIntersectV(model->embreeSceneHandleVolumes,
                &context.ectx,
                (varying RTCRayHit* uniform)&ray);

  if (hasInterval(interval))
    interval.volumeInstance = model->volumeInstances[ray.instID];
}

/*! Perform post-intersect computations, i.e. fill the members of
    DifferentialGeometry. Should only get called for rays that actually hit
    that given model. Variables are calculated according to 'flags', a
    bit-combination of DG_PostIntersectFlags.
    The ray, dg.P, dg.Ng, and dg.Ns are in world-coordinates.
    Color defaults to vec4f(1.f) if queried but not present in geometry.
   */
inline void postIntersect(const World *uniform model,
                          varying DifferentialGeometry &dg,
                          const varying Ray &ray,
                          uniform int64 flags)
{
  dg.primID = ray.primID;
  dg.st     = make_vec2f(ray.u, ray.v);

  dg.materialID = -1; // make sure this is properly initialized
  dg.material = NULL;

  cif (flags & DG_COLOR)
    dg.color = make_vec4f(1.f);

  cif (flags & DG_TANGENTS) {
    dg.dPds = make_vec3f(1.f, 0.f, 0.f);
    dg.dPdt = make_vec3f(0.f, 1.f, 0.f);
  }

  dg.P = ray.org + ray.t * ray.dir;
  dg.epsilon = 0.f; // per default no geometry-type specific epsilon

  if (ray.instID != RTC_INVALID_GEOMETRY_ID) {
    foreach_unique(instID in ray.instID) {
      GeometryInstance *uniform instGeom = model->geometryInstances[instID];
      GeometryInstance_postIntersect(instGeom, model, dg, ray, flags);
    }
  } else {
    dg.Ns = dg.Ng = ray.Ng;
  }

  // merge geometry-type specific epsilon with general epsilon
  dg.epsilon = max(dg.epsilon, calcEpsilon(dg.P, ray.dir, ray.t));

// some useful combinations; enums unfortunately don't work :-(
#define  DG_NG_FACEFORWARD (DG_NG | DG_FACEFORWARD)
#define  DG_NS_FACEFORWARD (DG_NS | DG_FACEFORWARD)
#define  DG_NG_NORMALIZE   (DG_NG | DG_NORMALIZE)
#define  DG_NS_NORMALIZE   (DG_NS | DG_NORMALIZE)

  vec3f ffnng = normalize(dg.Ng);

  cif ((flags & DG_NG_NORMALIZE) == DG_NG_NORMALIZE)
    dg.Ng = ffnng;
  cif ((flags & DG_NS_NORMALIZE) == DG_NS_NORMALIZE)
    dg.Ns = normalize(dg.Ns);

  const bool flip = dot(ray.dir, dg.Ng) >= 0.f;
  if (flip)
    ffnng = neg(ffnng);

  cif ((flags & DG_NG_FACEFORWARD) == DG_NG_FACEFORWARD)
    if (flip)
      dg.Ng = neg(dg.Ng);
  cif ((flags & DG_NS_FACEFORWARD) == DG_NS_FACEFORWARD)
    if (dot(dg.Ng,dg.Ns) < 0.f) dg.Ns = neg(dg.Ns);

  dg.P = dg.P + dg.epsilon * ffnng;
#undef  DG_NG_FACEFORWARD
#undef  DG_NS_FACEFORWARD
#undef  DG_NG_NORMALIZE
#undef  DG_NS_NORMALIZE
}

