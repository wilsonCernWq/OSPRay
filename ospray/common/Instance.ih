// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray stuff
#include "../common/Ray.ih"
#include "../geometry/GeometricModel.ih"
#include "../volume/VolumetricModel.ih"

struct Instance
{
  void *cppEquivalent;

  AffineSpace3f xfm;
  AffineSpace3f rcp_xfm;

  GeometricModel **geometricModels;
  int32 numGeometricModels;

  VolumetricModel **volumetricModels;
  int32 numVolumetricModels;
};

inline void Instance_postIntersect(const Instance *uniform self,
                                   varying DifferentialGeometry &dg,
                                   const varying Ray &ray,
                                   uniform int64 flags)
{
  foreach_unique(geomID in ray.geomID)
  {
    GeometricModel *uniform geom = *(self->geometricModels + geomID);
    GeometricModel_postIntersect(geom, dg, ray, flags);

    dg.Ns = xfmVector(transposed(self->rcp_xfm.l), dg.Ns);
    dg.Ng = xfmVector(transposed(self->rcp_xfm.l), dg.Ng);
    // scale dg.epsilon by max (epsilon is scalar and thus assumed to be
    // isotropic anyway and hence cannot better handle non-uniform scaling)
    dg.epsilon *= max(abs(self->xfm.l.vx.x),
                      max(abs(self->xfm.l.vy.y), abs(self->xfm.l.vz.z)));

    if (flags & DG_TANGENTS) {
      dg.dPds = xfmVector(self->xfm, dg.dPds);
      dg.dPdt = xfmVector(self->xfm, dg.dPdt);
    }
  }
}
