// Copyright 2009-2019 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "Texture2D.ih"
#include "math/AffineSpace.ih"

//! Texture2D including coordinate transformation, plus helpers

struct TextureParam
{
  uniform Texture2D *map;
  affine2f xform;
};

inline uniform TextureParam make_TextureParam(
    uniform Texture2D *uniform tex, const uniform affine2f &xform)
{
  uniform TextureParam t;
  t.map = tex;
  t.xform = xform;
  return t;
}

inline uniform bool valid(const uniform TextureParam uniform &tex)
{
  return tex.map;
}

inline uniform bool hasAlpha(const uniform TextureParam uniform &tex)
{
  return hasAlpha(tex.map);
}

inline float get1f(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg)
{
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return get1f(tex.map, xfmDg);
}

inline float get1f(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg,
    const varying float defaultValue)
{
  if (!valid(tex))
    return defaultValue;
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return get1f(tex.map, xfmDg);
}

inline vec3f get3f(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg)
{
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return get3f(tex.map, xfmDg);
}

inline vec3f get3f(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg,
    const varying vec3f defaultValue)
{
  if (!valid(tex))
    return defaultValue;
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return get3f(tex.map, xfmDg);
}

inline vec4f get4f(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg)
{
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return get4f(tex.map, xfmDg);
}

inline vec4f get4f(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg,
    const varying vec4f defaultValue)
{
  if (!valid(tex))
    return defaultValue;
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return get4f(tex.map, xfmDg);
}

inline vec3f getNormal(const uniform TextureParam uniform &tex,
    const varying DifferentialGeometry &dg)
{
  DifferentialGeometry xfmDg = dg;
  xfmDg.st = tex.xform * dg.st;
  return getNormal(tex.map, xfmDg);
}
