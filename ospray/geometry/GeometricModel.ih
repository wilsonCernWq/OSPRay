// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Geometry.ih"
#include "math/AffineSpace.ih"

struct GeometricModel
{
  Geometry *uniform geom;  //!< instanced Geometry

  vec4f *uniform primitiveColors;

  uint32 *prim_materialID;  // per-primitive material ID

  int32 numMaterials;
  Material *uniform *uniform materialList;

  float areaPDF;
};

inline void GeometricModel_postIntersect(const GeometricModel *uniform self,
                                         varying DifferentialGeometry &dg,
                                         const varying Ray &ray,
                                         uniform int64 flags)
{
  Geometry *uniform geom = self->geom;

  geom->postIntersect(geom, dg, ray, flags);

  dg.areaPDF = self->areaPDF;

  if (flags & DG_COLOR && self->primitiveColors)
    dg.color = self->primitiveColors[ray.primID];

  dg.materialID = -1;
  if (self->prim_materialID)
    dg.materialID = self->prim_materialID[ray.primID];
  else if (self->numMaterials > 1)
    dg.materialID = ray.primID;

  if (self->materialList)
    dg.material = self->materialList[dg.materialID < 0 ? 0 : dg.materialID];
}
